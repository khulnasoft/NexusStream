"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.de_ListStreamsCommand = exports.de_GetShardIteratorCommand = exports.de_GetRecordsCommand = exports.de_DescribeStreamCommand = exports.se_ListStreamsCommand = exports.se_GetShardIteratorCommand = exports.se_GetRecordsCommand = exports.se_DescribeStreamCommand = void 0;
const protocol_http_1 = require("@smithy/protocol-http");
const smithy_client_1 = require("@smithy/smithy-client");
const DynamoDBStreamsServiceException_1 = require("../models/DynamoDBStreamsServiceException");
const models_0_1 = require("../models/models_0");
const se_DescribeStreamCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeStream");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_DescribeStreamCommand = se_DescribeStreamCommand;
const se_GetRecordsCommand = async (input, context) => {
    const headers = sharedHeaders("GetRecords");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetRecordsCommand = se_GetRecordsCommand;
const se_GetShardIteratorCommand = async (input, context) => {
    const headers = sharedHeaders("GetShardIterator");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_GetShardIteratorCommand = se_GetShardIteratorCommand;
const se_ListStreamsCommand = async (input, context) => {
    const headers = sharedHeaders("ListStreams");
    let body;
    body = JSON.stringify((0, smithy_client_1._json)(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
exports.se_ListStreamsCommand = se_ListStreamsCommand;
const de_DescribeStreamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_DescribeStreamCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeStreamOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_DescribeStreamCommand = de_DescribeStreamCommand;
const de_DescribeStreamCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodbstreams#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodbstreams#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetRecordsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetRecordsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRecordsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetRecordsCommand = de_GetRecordsCommand;
const de_GetRecordsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ExpiredIteratorException":
        case "com.amazonaws.dynamodbstreams#ExpiredIteratorException":
            throw await de_ExpiredIteratorExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodbstreams#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodbstreams#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodbstreams#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TrimmedDataAccessException":
        case "com.amazonaws.dynamodbstreams#TrimmedDataAccessException":
            throw await de_TrimmedDataAccessExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetShardIteratorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_GetShardIteratorCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_GetShardIteratorCommand = de_GetShardIteratorCommand;
const de_GetShardIteratorCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodbstreams#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodbstreams#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "TrimmedDataAccessException":
        case "com.amazonaws.dynamodbstreams#TrimmedDataAccessException":
            throw await de_TrimmedDataAccessExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListStreamsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_ListStreamsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = (0, smithy_client_1._json)(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
exports.de_ListStreamsCommand = de_ListStreamsCommand;
const de_ListStreamsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.dynamodbstreams#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodbstreams#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ExpiredIteratorExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ExpiredIteratorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_InternalServerErrorRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.InternalServerError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_TrimmedDataAccessExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = (0, smithy_client_1._json)(body);
    const exception = new models_0_1.TrimmedDataAccessException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, body);
};
const de_AttributeMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_AttributeValue((0, smithy_client_1.expectUnion)(value), context);
        return acc;
    }, {});
};
const de_AttributeValue = (output, context) => {
    if (output.B != null) {
        return {
            B: context.base64Decoder(output.B),
        };
    }
    if ((0, smithy_client_1.expectBoolean)(output.BOOL) !== undefined) {
        return { BOOL: (0, smithy_client_1.expectBoolean)(output.BOOL) };
    }
    if (output.BS != null) {
        return {
            BS: de_BinarySetAttributeValue(output.BS, context),
        };
    }
    if (output.L != null) {
        return {
            L: de_ListAttributeValue(output.L, context),
        };
    }
    if (output.M != null) {
        return {
            M: de_MapAttributeValue(output.M, context),
        };
    }
    if ((0, smithy_client_1.expectString)(output.N) !== undefined) {
        return { N: (0, smithy_client_1.expectString)(output.N) };
    }
    if (output.NS != null) {
        return {
            NS: (0, smithy_client_1._json)(output.NS),
        };
    }
    if ((0, smithy_client_1.expectBoolean)(output.NULL) !== undefined) {
        return { NULL: (0, smithy_client_1.expectBoolean)(output.NULL) };
    }
    if ((0, smithy_client_1.expectString)(output.S) !== undefined) {
        return { S: (0, smithy_client_1.expectString)(output.S) };
    }
    if (output.SS != null) {
        return {
            SS: (0, smithy_client_1._json)(output.SS),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_BinarySetAttributeValue = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return context.base64Decoder(entry);
    });
    return retVal;
};
const de_DescribeStreamOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        StreamDescription: (_) => de_StreamDescription(_, context),
    });
};
const de_GetRecordsOutput = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        NextShardIterator: smithy_client_1.expectString,
        Records: (_) => de_RecordList(_, context),
    });
};
const de_ListAttributeValue = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AttributeValue((0, smithy_client_1.expectUnion)(entry), context);
    });
    return retVal;
};
const de_MapAttributeValue = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_AttributeValue((0, smithy_client_1.expectUnion)(value), context);
        return acc;
    }, {});
};
const de__Record = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        awsRegion: smithy_client_1.expectString,
        dynamodb: (_) => de_StreamRecord(_, context),
        eventID: smithy_client_1.expectString,
        eventName: smithy_client_1.expectString,
        eventSource: smithy_client_1.expectString,
        eventVersion: smithy_client_1.expectString,
        userIdentity: smithy_client_1._json,
    });
};
const de_RecordList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de__Record(entry, context);
    });
    return retVal;
};
const de_StreamDescription = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        CreationRequestDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        KeySchema: smithy_client_1._json,
        LastEvaluatedShardId: smithy_client_1.expectString,
        Shards: smithy_client_1._json,
        StreamArn: smithy_client_1.expectString,
        StreamLabel: smithy_client_1.expectString,
        StreamStatus: smithy_client_1.expectString,
        StreamViewType: smithy_client_1.expectString,
        TableName: smithy_client_1.expectString,
    });
};
const de_StreamRecord = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        ApproximateCreationDateTime: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(_))),
        Keys: (_) => de_AttributeMap(_, context),
        NewImage: (_) => de_AttributeMap(_, context),
        OldImage: (_) => de_AttributeMap(_, context),
        SequenceNumber: smithy_client_1.expectString,
        SizeBytes: smithy_client_1.expectLong,
        StreamViewType: smithy_client_1.expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = (0, smithy_client_1.withBaseException)(DynamoDBStreamsServiceException_1.DynamoDBStreamsServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocol_http_1.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": `DynamoDBStreams_20120810.${operation}`,
    };
}
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};

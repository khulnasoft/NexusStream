{"version":3,"file":"messaging.cjs.development.js","sources":["../src/http/httpInterceptor.ts","../src/authentication.ts","../src/configuration.ts","../src/defaultConfiguration.ts","../src/errors/apiError.ts","../src/apiHelper.ts","../src/errors/abortError.ts","../src/fileWrapper.ts","../src/http/httpHeaders.ts","../src/http/queryString.ts","../src/http/httpClient.ts","../src/http/pathTemplate.ts","../src/errors/argumentsValidationError.ts","../src/errors/responseValidationError.ts","../src/http/validate.ts","../src/http/xmlSerialization.ts","../src/http/requestBuilder.ts","../src/client.ts","../src/errors/messagingExceptionError.ts","../src/models/bandwidthMessage.ts","../src/models/bandwidthMessageItem.ts","../src/models/pageInfo.ts","../src/models/bandwidthMessagesList.ts","../src/models/media.ts","../src/models/priorityEnum.ts","../src/models/messageRequest.ts","../src/controllers/baseController.ts","../src/controllers/apiController.ts"],"sourcesContent":["/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { HttpContext } from './httpContext';\nimport { HttpRequest } from './httpRequest';\n\n/**\n * Interface for a method that executes an HTTP request and returns the HTTP context.\n *\n * The context contains the HTTP response and the HTTP request (which may or may not be the same\n * as the original HTTP request).\n */\nexport type HttpCallExecutor<T> = (\n  request: HttpRequest,\n  requestOptions: T\n) => Promise<HttpContext>;\n\n/**\n * Interface representing an HTTP interceptor method.\n *\n * HTTP interceptors are used to extend the HTTP call pipeline with new behavior or\n * features.\n *\n * An HTTP interceptor receives an HTTP request. It can modify the\n * HTTP request and then pass it along to the next HTTP interceptor in the chain which\n * then returns an HTTP response. It then returns this HTTP response, after optionally\n * modifying it.\n */\nexport interface HttpInterceptorInterface<T> {\n  (request: HttpRequest, requestOptions: T, next: HttpCallExecutor<T>): Promise<\n    HttpContext\n  >;\n}\n\n/**\n * Calls HTTP interceptor chain\n *\n * @param interceptors HTTP interceptor chain\n * @param client Terminating HTTP handler\n */\nexport function callHttpInterceptors<T>(\n  interceptors: HttpInterceptorInterface<T>[],\n  client: HttpCallExecutor<T>\n): HttpCallExecutor<T> {\n  let next = client;\n  for (let index = interceptors.length - 1; index >= 0; index--) {\n    const current = interceptors[index];\n    const last = next;\n    next = (request, options) => current(request, options, last);\n  }\n  return next;\n}\n\n/** Pass-through HTTP interceptor. */\nexport function passThroughInterceptor<T>(\n  request: HttpRequest,\n  requestOptions: T,\n  next: HttpCallExecutor<T>\n): Promise<HttpContext> {\n  return next(request, requestOptions);\n}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { passThroughInterceptor } from './http/httpInterceptor';\nimport { AuthenticatorInterface } from './http/requestBuilder';\n\n/** None authentication provider */\nexport const noneAuthenticationProvider = () => passThroughInterceptor;\n\nexport const basicAuthAuthenticationProvider = ({\n  basicAuthUserName,\n  basicAuthPassword,\n}: {\n  basicAuthUserName: string;\n  basicAuthPassword: string;\n}): AuthenticatorInterface<boolean> => {\n  return (requiresAuth?: boolean) => {\n    if (!requiresAuth) {\n      return passThroughInterceptor;\n    }\n\n    return (request, options, next) => {\n      request.auth = {\n        username: basicAuthUserName,\n        password: basicAuthPassword,\n      };\n\n      return next(request, options);\n    };\n  };\n};\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\n/** An interface for all configuration parameters required by the SDK. */\nexport interface Configuration {\n  timeout: number;\n  environment: Environment;\n  baseUrl: string;\n  basicAuthUserName: string;\n  basicAuthPassword: string;\n  unstable_httpClientOptions?: any;\n}\n\n/** Environments available for API */\nexport enum Environment {\n  Production = 'production',\n  Custom = 'custom',\n}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { Configuration, Environment } from './configuration';\n\n/** Default values for the configuration parameters of the client. */\nexport const DEFAULT_CONFIGURATION: Configuration = {\n  timeout: 0,\n  environment: Environment.Production,\n  baseUrl: 'https://www.example.com',\n  basicAuthUserName: 'TODO access token',\n  basicAuthPassword: 'TODO access token',\n};\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport JSONBig from 'json-bigint';\nimport { HttpContext } from '../http/httpContext';\nimport { HttpRequest } from '../http/httpRequest';\nimport { ApiResponse } from '../apiResponse';\n\n/**\n * Thrown when the HTTP status code is not okay.\n *\n * The ApiError extends the ApiResponse interface, so all ApiResponse\n * properties are available.\n */\nexport class ApiError<T = {}> extends Error\n  implements ApiResponse<T | undefined> {\n  public request: HttpRequest;\n  public statusCode: number;\n  public headers: Record<string, string>;\n  public result: T | undefined;\n  public body: string | Blob | NodeJS.ReadableStream;\n\n  constructor(context: HttpContext, message: string) {\n    super(message);\n\n    const { request, response } = context;\n    this.request = request;\n    this.statusCode = response.statusCode;\n    this.headers = response.headers;\n    this.body = response.body;\n\n    if (typeof response.body === 'string' && response.body !== '') {\n      const JSON = JSONBig({ useNativeBigInt: true });\n      try {\n        this.result = JSON.parse(response.body);\n      } catch (error) {\n        if (__DEV__) {\n          if (console) {\n            console.warn(\n              `Unexpected error: Could not parse HTTP response body as JSON. ${error.message}`\n            );\n          }\n        }\n      }\n    }\n  }\n}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport warning from 'tiny-warning';\n\n/**\n * Validates the protocol and removes duplicate forward slashes\n *\n * @param url URL to clean\n * @returns Sanitized URL\n */\nexport function sanitizeUrl(url: string): string {\n  // ensure that the urls are absolute\n  const protocolRegex = /^https?:\\/\\/[^/]+/;\n  const match = url.match(protocolRegex);\n  if (match === null) {\n    throw new Error(`Invalid URL format: ${url}`);\n  }\n\n  // remove redundant double-forward slashes\n  const protocol = match[0];\n  const queryUrl = url.substring(protocol.length).replace(/\\/\\/+/g, '/');\n  return protocol + queryUrl;\n}\n\n/**\n * Check whether value is an instance of Blob\n *\n * @remark\n * Reference: https://github.com/sindresorhus/is-blob/blob/master/index.js\n *\n * @param value Value to check\n * @returns True if the value is a Blob instance\n */\nexport function isBlob(value: unknown): value is Blob {\n  if (typeof Blob === 'undefined') {\n    return false;\n  }\n\n  return (\n    value instanceof Blob ||\n    Object.prototype.toString.call(value) === '[object Blob]'\n  );\n}\n\n// This is used by deprecated() to keep track of \"hits\".\nconst deprecatedHits: Record<string, boolean> = {};\n\n/**\n * Create warning for deprecated method usage.\n *\n * This is called once per deprecated method. If this method is called again\n * with the same arguments, no warning is generated.\n *\n * @param methodName Method name for deprecated method\n * @param notice Optional message for deprecation\n */\nexport function deprecated(methodName: string, notice?: string): void {\n  let message = `Method ${methodName} is deprecated.`;\n  if (notice) {\n    message += ` ${notice}`;\n  }\n  if (deprecatedHits[message]) {\n    return;\n  }\n  deprecatedHits[message] = true;\n  warning(false, message);\n}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\n/**\n * Thrown when the API call is aborted by the caller.\n *\n * Note that when an AbortError is thrown, it is not a guarantee that the API call\n * did not go through.\n */\nexport class AbortError extends Error {}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\n/**\n * Wraps file with mime-type and filename to be sent as part of an HTTP request.\n */\nexport class FileWrapper {\n  constructor(\n    public file: Blob | import('stream').Readable,\n    public options?: FileWrapperOptions\n  ) {\n    this.file = file;\n  }\n}\n\n/** File upload options such as filename and mime-type */\ninterface FileWrapperOptions {\n  /** Mime-type to be sent with the file */\n  contentType?: string;\n  /** Name of the file to be used in the upload data */\n  filename?: string;\n  /** Headers to be used in the multipart request */\n  headers?: Record<string, string>;\n}\n\n/** Returns true if value is a FileWrapper */\nexport function isFileWrapper(value: unknown): value is FileWrapper {\n  return value instanceof FileWrapper;\n}\n\n/**\n * Returns a deep clone of the FileWrapper instance\n *\n * @param fileWrapper FileWrapper instance to copy\n */\nexport function cloneFileWrapper(fileWrapper: FileWrapper): FileWrapper {\n  let options: FileWrapperOptions | undefined;\n  if (fileWrapper.options) {\n    options = cloneFileWrapperOptions(fileWrapper.options);\n  }\n  return new FileWrapper(fileWrapper.file, options);\n}\n\nfunction cloneFileWrapperOptions(\n  fileWrapperOptions: FileWrapperOptions\n): FileWrapperOptions {\n  const clone = { ...fileWrapperOptions };\n  if (fileWrapperOptions.headers) {\n    clone.headers = { ...fileWrapperOptions.headers };\n  }\n  return clone;\n}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\n/**\n * Set a header in the headers map.\n *\n * This method performs case-insensitive handling of header names.\n *\n * @param headers Map of headers\n * @param name Header name\n * @param value Header value\n */\n export function setHeader(\n  headers: Record<string, string | number | boolean>,\n  name: string,\n  value?: string | number | boolean | undefined\n): void {\n  const realHeaderName = lookupCaseInsensitive(headers, name);\n  setHeaderInternal(headers, realHeaderName, name, value);\n}\n\nfunction setHeaderInternal(\n  headers: Record<string, string | number | boolean | undefined>,\n  realHeaderName: string | null,\n  name: string,\n  value: string | number | boolean | undefined\n): void {\n  if (realHeaderName) {\n    delete headers[realHeaderName];\n  }\n  if (value) {\n    headers[name] = value;\n  }\n}\n\n/**\n * Set a header in the headers map if it is not already set.\n *\n * This method performs case-insensitive handling of header names.\n *\n * @param headers Map of headers\n * @param name Header name\n * @param value Header value\n */\nexport function setHeaderIfNotSet(\n  headers: Record<string, string | number | boolean>,\n  name: string,\n  value?: string | number | boolean | undefined\n): void {\n  const realHeaderName = lookupCaseInsensitive(headers, name);\n  if (!realHeaderName) {\n    setHeaderInternal(headers, realHeaderName, name, value);\n  }\n}\n\n/**\n * Get header from a map of headers.\n *\n * This method performs case-insensitive handling of header names.\n *\n * @param headers Map of headers\n * @param name Header name\n */\nexport function getHeader(\n  headers: Record<string, string>,\n  name: string\n): string | null {\n  const prop = lookupCaseInsensitive(headers, name);\n  if (prop) {\n    return headers[prop];\n  }\n  return null;\n}\n\n/**\n * Looks up and returns the matching property name from the object.\n *\n * This method returns the matching property name in the object which might or might\n * not have the same case as the prop argument.\n *\n * @param obj Object with string property names\n * @param prop Property to lookup\n */\nexport function lookupCaseInsensitive(\n  obj: Record<string, unknown>,\n  prop: string\n): string | null {\n  prop = prop.toLowerCase();\n  for (const p in obj) {\n    if (\n      Object.prototype.hasOwnProperty.call(obj, p) &&\n      prop === p.toLowerCase()\n    ) {\n      return p;\n    }\n  }\n  return null;\n}\n\n/**\n * Merge headers\n *\n * Header names are compared using case-insensitive comparison. This method\n * preserves the original header name. If the headersToMerge overrides an existing\n * header, then the new header name (with its casing) is used.\n *\n * @param headers Headers to merge into\n * @param headersToMerge Headers to set\n */\nexport function mergeHeaders(\n  headers: Record<string, string | number | boolean>,\n  headersToMerge: Record<string, string | number | boolean>\n): void {\n  const headerKeys: Record<string, string> = {};\n\n  // Create a map of lower-cased-header-name to original-header-names\n  for (const headerName of Object.getOwnPropertyNames(headers)) {\n    headerKeys[headerName.toLowerCase()] = headerName;\n  }\n\n  // Override headers with new values\n  for (const headerName of Object.getOwnPropertyNames(headersToMerge)) {\n    const lowerCasedName = headerName.toLowerCase();\n    if (headerKeys[lowerCasedName]) {\n      delete headers[headerKeys[lowerCasedName]];\n    }\n    headerKeys[lowerCasedName] = headerName;\n    headers[headerName] = headersToMerge[headerName];\n  }\n}\n\n/**\n * Assert headers object is valid\n */\nexport function assertHeaders(\n  headers: unknown\n): asserts headers is Record<string, string> {\n  if (headers === null || typeof headers !== 'object') {\n    throw new TypeError('Headers must be an object.');\n  }\n\n  for (const headerName of Object.getOwnPropertyNames(headers)) {\n    if (!isValidHeaderName(headerName)) {\n      throw new Error(`\"${headerName}\" is not a valid header name.`);\n    }\n    const headerValue = (headers as Record<string, unknown>)[headerName];\n    if (typeof headerValue !== 'string') {\n      throw new TypeError(\n        `Header value must be string but ${typeof headerValue} provided.`\n      );\n    }\n  }\n}\n\n/**\n * Return true if header name is valid\n * @param headerName Header name\n */\nexport function isValidHeaderName(headerName: string): boolean {\n  return /^[\\w!#$%&'*+.^`|~-]+$/.test(headerName);\n}\n\nexport const CONTENT_TYPE_HEADER = 'content-type';\nexport const ACCEPT_HEADER = 'accept';\nexport const CONTENT_LENGTH_HEADER = 'content-length';\nexport const AUTHORIZATION_HEADER = 'authorization';\nexport const FORM_URLENCODED_CONTENT_TYPE = 'application/x-www-form-urlencoded';\nexport const JSON_CONTENT_TYPE = 'application/json';\nexport const TEXT_CONTENT_TYPE = 'text/plain; charset=utf-8';\nexport const XML_CONTENT_TYPE = 'application/xml';\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { FileWrapper, isFileWrapper, cloneFileWrapper } from '../fileWrapper';\n\n/**\n * Type for Key-value pair for form-urlencoded serialization\n */\nexport type FormKeyValuePair = { key: string; value: string | FileWrapper };\n\n/**\n * Type for list of key-value pairs for form-urlencoded serialization\n */\nexport type FormKeyValuePairList = FormKeyValuePair[];\n\n/**\n * Type for formatting function used to create key for nested arrays\n */\nexport type ArrayPrefixFunction = (\n  prefix: string,\n  key: number | string\n) => string;\n\n/**\n * Array prefix format: item[1]=1&item[2]=2\n */\nexport const indexedPrefix: ArrayPrefixFunction = (prefix, key) =>\n  `${prefix}[${key}]`;\n\n/**\n * Array prefix format: item[]=1&item[]=2\n */\nexport const unindexedPrefix: ArrayPrefixFunction = prefix => prefix + '[]';\n\n/**\n * Array prefix format: item=1&item=2\n */\nexport const plainPrefix: ArrayPrefixFunction = prefix => prefix;\n\n/**\n * Converts an object to a list of key-value pairs for form-urlencoded serialization.\n *\n * @param obj The object to serialize\n * @param prefixFormat Formatting function to create key for nested arrays\n * @return Result of serialization\n */\nexport function formDataEncodeObject(\n  obj: Record<string, unknown>,\n  prefixFormat: ArrayPrefixFunction = indexedPrefix\n): FormKeyValuePairList {\n  const result: FormKeyValuePairList = [];\n\n  for (const key of Object.keys(obj)) {\n    const value = obj[key];\n    if (value === null || value === undefined) {\n      continue;\n    } else if (\n      typeof value === 'string' ||\n      typeof value === 'number' ||\n      typeof value === 'boolean' ||\n      typeof value === 'bigint'\n    ) {\n      result.push({ key, value: value.toString() });\n    } else if (isFileWrapper(value)) {\n      result.push({ key, value: cloneFileWrapper(value) });\n    } else if (Array.isArray(value)) {\n      for (let iter = 0; iter < value.length; iter += 1) {\n        result.push(\n          ...formDataEncodeObject({ [prefixFormat(key, iter)]: value[iter] })\n        );\n      }\n    } else if (typeof value === 'object') {\n      for (const objectKey in value) {\n        if (Object.prototype.hasOwnProperty.call(value, objectKey)) {\n          const element = value[objectKey as keyof typeof value];\n          result.push(\n            ...formDataEncodeObject({\n              [indexedPrefix(key, objectKey)]: element,\n            })\n          );\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\n/**\n * Return a new list with all key-value pairs, which have a FileWrapper as value, removed\n *\n * @param params List of key-value pairs\n */\nexport function filterFileWrapperFromKeyValuePairs(\n  params: FormKeyValuePairList\n): { key: string; value: string }[] {\n  return params.filter(p => !isFileWrapper(p.value)) as any;\n}\n\n/**\n * Serializes an object for a form-urlencoded request.\n *\n * Nested and complex types in values will be flattened using {@link formDataEncodeObject() function} method.\n *\n * @param  obj The object to be serialized\n * @return The result of serialization\n */\nexport function urlEncodeObject(obj: Record<string, unknown>): string {\n  const params = formDataEncodeObject(obj);\n  return urlEncodeKeyValuePairs(params);\n}\n\n/**\n * Serializes a list of key-value pairs for a form-urlencoded request.\n *\n * @param params List of key-value pairs to serialize\n * @return The result of serialization\n */\nexport function urlEncodeKeyValuePairs(\n  params: FormKeyValuePairList | undefined\n): string {\n  const encode = encodeURIComponent;\n  return (params || [])\n    .map(p => `${encode(p.key)}=${encode(p.value.toString())}`)\n    .join('&');\n}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\n import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\n import isNode from 'detect-node';\n import FormData from 'form-data';\n import { isBlob } from '../apiHelper';\n import { AbortError } from '../errors/abortError';\n import { isFileWrapper } from '../fileWrapper';\n import {\n   CONTENT_TYPE_HEADER,\n   FORM_URLENCODED_CONTENT_TYPE,\n   mergeHeaders,\n   setHeader,\n   setHeaderIfNotSet,\n } from './httpHeaders';\n import { HttpRequest } from './httpRequest';\n import { HttpResponse } from './httpResponse';\n import { urlEncodeKeyValuePairs } from './queryString';\n \n export const DEFAULT_AXIOS_CONFIG_OVERRIDES: AxiosRequestConfig = {\n   transformResponse: [],\n };\n \n export const DEFAULT_TIMEOUT = 30 * 1000;\n \n /**\n  * HTTP client implementation.\n  *\n  * This implementation is a wrapper over the Axios client.\n  */\n export class HttpClient {\n   private _axiosInstance: AxiosInstance;\n   private _timeout: number;\n \n   constructor({\n     clientConfigOverrides,\n     timeout = DEFAULT_TIMEOUT,\n   }: { clientConfigOverrides?: AxiosRequestConfig; timeout?: number } = {}) {\n     this._timeout = timeout;\n     this._axiosInstance = axios.create({\n       ...DEFAULT_AXIOS_CONFIG_OVERRIDES,\n       ...clientConfigOverrides,\n     });\n   }\n \n   /** Converts an HttpRequest object to an Axios request. */\n   public convertHttpRequest(req: HttpRequest): AxiosRequestConfig {\n     const newRequest: AxiosRequestConfig = {\n       method: req.method,\n       url: req.url,\n       responseType: 'text',\n       headers: { ...req.headers },\n     };\n \n     if (req.auth) {\n       // Set basic auth credentials if provided\n       newRequest.auth = {\n         username: req.auth.username,\n         password: req.auth.password || '',\n       };\n     }\n     \n     const requestBody = req.body;\n     if (requestBody?.type === 'text') {\n       newRequest.data = requestBody.content;\n     } else if (\n       requestBody?.type === 'form-data' &&\n       requestBody.content.some(item => isFileWrapper(item.value))\n     ) {\n       // Create multipart request if a file is present\n       const form = new FormData();\n       for (const iter of requestBody.content) {\n         if (isFileWrapper(iter.value)) {\n           let fileData = iter.value.file;\n \n           // Make sure Blob has the correct content type if provided\n           if (isBlob(fileData) && iter.value.options?.contentType) {\n             fileData = new Blob([fileData], {\n               type: iter.value.options.contentType,\n             });\n           }\n \n           form.append(iter.key, fileData, iter.value.options);\n         } else {\n           form.append(iter.key, iter.value);\n         }\n       }\n \n       newRequest.data = form;\n       mergeHeaders(newRequest.headers || {} , form.getHeaders());\n     } else if (\n       requestBody?.type === 'form-data' ||\n       requestBody?.type === 'form'\n     ) {\n       // Create form-urlencoded request\n       setHeader(\n         newRequest.headers || {},\n         CONTENT_TYPE_HEADER,\n         FORM_URLENCODED_CONTENT_TYPE\n       );\n       newRequest.data = urlEncodeKeyValuePairs(requestBody.content);\n     } else if (requestBody?.type === 'stream') {\n       let contentType = 'application/octet-stream';\n       if (isBlob(requestBody.content.file) && requestBody.content.file.type) {\n         // Set Blob mime type as the content-type header if present\n         contentType = requestBody.content.file.type;\n       } else if (requestBody.content.options?.contentType) {\n         // Otherwise, use the content type if available.\n         contentType = requestBody.content.options.contentType;\n       }\n       setHeaderIfNotSet(newRequest.headers || {}, CONTENT_TYPE_HEADER, contentType);\n       newRequest.data = requestBody.content.file;\n     } \n     else if (requestBody && typeof(requestBody['type']) !== 'undefined') {\n \n       throw new Error(\n         `HTTP client encountered unknown body type '${requestBody[\"type\"]}'. Could not execute HTTP request.`\n       );\n     }\n \n     if (req.responseType === 'stream') {\n       newRequest.responseType = isNode ? 'stream' : 'blob';\n     }\n \n     // Prevent superagent from converting any status code to error\n     newRequest.validateStatus = () => true;\n \n     // Set 30 seconds timeout\n     newRequest.timeout = this._timeout;\n \n     return newRequest;\n   }\n \n   /** Converts an Axios response to an HttpResponse object. */\n   public convertHttpResponse(resp: AxiosResponse): HttpResponse {\n     return {\n       body: resp.data,\n       headers: resp.headers,\n       statusCode: resp.status,\n     };\n   }\n \n   /**\n    * Executes the HttpRequest with the given options and returns the HttpResponse\n    * or throws an error.\n    */\n   public async executeRequest(\n     request: HttpRequest,\n     requestOptions?: { abortSignal?: AbortSignal }\n   ): Promise<HttpResponse> {\n     const axiosRequest = this.convertHttpRequest(request);\n \n     if (requestOptions?.abortSignal) {\n       // throw if already aborted; do not place HTTP call\n       if (requestOptions.abortSignal.aborted) {\n         throw this.abortError();\n       }\n \n       const cancelToken = axios.CancelToken.source();\n       axiosRequest.cancelToken = cancelToken.token;\n \n       // attach abort event handler\n       requestOptions.abortSignal.addEventListener('abort', () => {\n         cancelToken.cancel();\n       });\n     }\n \n     try {\n       return this.convertHttpResponse(await this._axiosInstance(axiosRequest));\n     } catch (error) {\n       // abort error should be thrown as the AbortError\n       if (axios.isCancel(error)) {\n         throw this.abortError();\n       }\n \n       throw error;\n     }\n   }\n \n   private abortError() {\n     return new AbortError('The HTTP call was aborted.');\n   }\n }\n ","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport flatMap from 'lodash.flatmap';\n\n/** Marker for skipping URL-encoding when used with Path templating */\nexport class SkipEncode<T extends PathTemplatePrimitiveTypes> {\n  constructor(public value: T) {}\n}\n\nexport type PathTemplatePrimitiveTypes = string | string[] | number | number[];\n\n/** Path template argument type */\nexport type PathTemplateTypes =\n  | PathTemplatePrimitiveTypes\n  | SkipEncode<PathTemplatePrimitiveTypes>;\n\n/**\n * URL path templating method.\n *\n * Template arguments of array type are imploded using the path separator and\n * individual elements are URL-encoded.\n *\n * Template arguments are URL-encoded unless wrapped in a SkipEncode instance.\n */\nexport function pathTemplate(\n  strings: TemplateStringsArray,\n  ...args: PathTemplateTypes[]\n) {\n  const values = flatMap(\n    interweaveArrays(\n      strings.map(s => new SkipEncode(s)),\n      args\n    ),\n    encodePathTemplateSegment\n  );\n  const pathSegment = values.join('');\n  return pathSegment;\n}\n\nfunction encodePathTemplateSegment(value: PathTemplateTypes) {\n  let skipEncode = false;\n  const encode = (m: string | number) =>\n    skipEncode ? m.toString() : encodeURIComponent(m);\n  if (value instanceof SkipEncode) {\n    value = value.value;\n    skipEncode = true;\n  }\n  return Array.isArray(value)\n    ? (value as Array<string | number>).map<string | number>(encode).join('/')\n    : [encode(value)];\n}\n\nfunction interweaveArrays<A, B>(\n  a: ReadonlyArray<A>,\n  b: ReadonlyArray<B>\n): Array<A | B> {\n  const min = Math.min(a.length, b.length);\n  return Array.apply(null, new Array(min))\n    .reduce((result: Array<A | B>, _, index) => {\n      result.push(a[index], b[index]);\n      return result;\n    }, [])\n    .concat((a.length > min ? a : b).slice(min));\n}\n","import { SchemaValidationError } from '../schema';\n\n/**\n * Thrown when one or more arguments passed to a method fail validation.\n */\nexport class ArgumentsValidationError extends Error {\n  public readonly errors: Record<string, SchemaValidationError[]>;\n  constructor(errors: Record<string, SchemaValidationError[]>) {\n    const errorKeys = Object.keys(errors);\n\n    let message: string;\n    if (errorKeys.length === 0) {\n      message = 'One or more arguments failed validation.';\n    } else if (errorKeys.length === 1 && errors[errorKeys[0]].length === 1) {\n      message = `Argument for '${errorKeys[0]}' failed validation.\\n\\n${\n        errors[errorKeys[0]][0].message\n      }`;\n    } else {\n      message = `The following arguments failed validation: ${errorKeys.join(\n        ', '\n      )}.\\n\\n`;\n\n      const msgList: string[] = [];\n      for (const param of errorKeys) {\n        msgList.push(`> For argument '${param}':`);\n        if (errors[param].length === 1) {\n          msgList.push(errors[param][0].message!);\n        } else {\n          for (let index = 0; index < errors[param].length; index++) {\n            const error = errors[param][index];\n            msgList.push(`>> Issue #${index + 1}\\n\\n${error.message}`);\n          }\n        }\n      }\n\n      message += msgList.join('\\n\\n');\n    }\n\n    super(message);\n    this.errors = errors;\n  }\n}\n","import { HttpRequest } from '../http/httpRequest';\nimport { ApiResponse } from '../apiResponse';\nimport { SchemaValidationError } from '../schema';\n\n/**\n * Thrown when the API response does not match the schema.\n */\nexport class ResponseValidationError extends Error\n  implements ApiResponse<never> {\n  public request: HttpRequest;\n  public statusCode: number;\n  public headers: Record<string, string>;\n  public result: never;\n  public body: string | Blob | NodeJS.ReadableStream;\n  public errors: SchemaValidationError[];\n\n  constructor(apiResponse: ApiResponse<any>, errors: SchemaValidationError[]) {\n    let message = 'The response did not match the response schema.';\n\n    if (errors.length === 1) {\n      message += `\\n\\n${errors[0].message}`;\n    } else {\n      message += errors\n        .map((e, i) => `\\n\\n> Issue #${i + 1}\\n\\n${e.message}`)\n        .join('');\n    }\n\n    super(message);\n\n    this.request = apiResponse.request;\n    this.statusCode = apiResponse.statusCode;\n    this.headers = apiResponse.headers;\n    this.body = apiResponse.body;\n    this.errors = errors;\n  }\n}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport {\n  Schema,\n  SchemaMappedType,\n  SchemaType,\n  SchemaValidationError,\n  validateAndUnmap,\n} from '../schema';\nimport { ArgumentsValidationError } from '../errors/argumentsValidationError';\n\n/**\n * Prepares arguments for being sent in the API request.\n *\n * Each argument is validated and converted to a JSON-serialization ready value.\n *\n * If one or more arguments fail validation, an ArgumentsValidationError is\n * thrown, which contains the validation details for all arguments that failed\n * validation.\n *\n * @param params Map of arguments with values and schema\n * @returns Map of serialization-ready argument values\n *\n * @throws ArgumentsValidationError\n */\nexport function prepareArgs<\n  S extends Schema<any, any>,\n  T extends Record<string, [SchemaType<S>, S]>\n>(params: T): { [key in keyof T]: SchemaMappedType<T[key][1]> } {\n  const validationErrors: Record<string, SchemaValidationError[]> = {};\n  const result: Partial<{ [key in keyof T]: SchemaMappedType<T[key][1]> }> = {};\n\n  for (const paramName in params) {\n    if (Object.prototype.hasOwnProperty.call(params, paramName)) {\n      const paramInfo = params[paramName];\n      const validationResult = validateAndUnmap(paramInfo[0], paramInfo[1]);\n      if (validationResult.errors) {\n        validationErrors[paramName] = validationResult.errors;\n      } else {\n        result[paramName] = validationResult.result;\n      }\n    }\n  }\n\n  if (Object.keys(validationErrors).length > 0) {\n    throw new ArgumentsValidationError(validationErrors);\n  }\n\n  return result as any;\n}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nexport function xmlSerialize(_rootName: string, _value: unknown): string {\n  throw new Error('XML serialization is not available.');\n}\n\nexport async function xmlDeserialize(\n  _rootName: string,\n  _xmlString: string\n): Promise<any> {\n  throw new Error('XML deserialization is not available.');\n}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport isNode from 'detect-node';\nimport JSONBig from 'json-bigint';\nimport { FileWrapper } from '../fileWrapper';\nimport { deprecated, sanitizeUrl } from '../apiHelper';\nimport { ApiResponse } from '../apiResponse';\nimport { ArgumentsValidationError } from '../errors/argumentsValidationError';\nimport { ResponseValidationError } from '../errors/responseValidationError';\nimport {\n  Schema,\n  validateAndMap,\n  validateAndMapXml,\n  validateAndUnmapXml,\n} from '../schema';\nimport { HttpContext } from './httpContext';\nimport {\n  ACCEPT_HEADER,\n  CONTENT_LENGTH_HEADER,\n  CONTENT_TYPE_HEADER,\n  JSON_CONTENT_TYPE,\n  mergeHeaders,\n  setHeader,\n  setHeaderIfNotSet,\n  TEXT_CONTENT_TYPE,\n  XML_CONTENT_TYPE,\n} from './httpHeaders';\nimport {\n  callHttpInterceptors,\n  HttpInterceptorInterface,\n} from './httpInterceptor';\nimport {\n  HttpMethod,\n  HttpRequest,\n  HttpRequestMultipartFormBody,\n  HttpRequestUrlEncodedFormBody,\n} from './httpRequest';\nimport { HttpResponse } from './httpResponse';\nimport {\n  pathTemplate,\n  PathTemplatePrimitiveTypes,\n  PathTemplateTypes,\n  SkipEncode,\n} from './pathTemplate';\nimport {\n  filterFileWrapperFromKeyValuePairs,\n  formDataEncodeObject,\n  urlEncodeObject,\n} from './queryString';\nimport { prepareArgs } from './validate';\nimport { xmlDeserialize, xmlSerialize } from './xmlSerialization';\n\nexport interface RequestBuilderFactory<BaseUrlParamType, AuthParams> {\n  (httpMethod: HttpMethod, path?: string): RequestBuilder<\n    BaseUrlParamType,\n    AuthParams\n  >;\n}\n\nconst JSON = JSONBig({ useNativeBigInt: true });\n\ntype QueryValue =\n  | string\n  | string[]\n  | number\n  | number[]\n  | bigint\n  | bigint[]\n  | boolean\n  | null\n  | undefined;\n\nexport function skipEncode<T extends PathTemplatePrimitiveTypes>(\n  value: T\n): SkipEncode<T> {\n  return new SkipEncode(value);\n}\n\n/** Optional API call options such as the Abort Signal. */\nexport interface RequestOptions {\n  /**\n   * Allows cancelling the API call using an Abort Signal.\n   *\n   * This must be set to an instance compatible with the\n   * [WHATWG AbortSignal](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal). The\n   * AbortSignal comes built-in in modern browsers and can be polyfilled for older browser versions\n   * and Node.js using the\n   * [abort-controller](https://github.com/mysticatea/abort-controller) package.\n   */\n  abortSignal?: AbortSignal;\n}\n\nexport interface HttpClientInterface {\n  (request: HttpRequest, requestOptions?: RequestOptions): Promise<\n    HttpResponse\n  >;\n}\n\nexport interface ApiErrorConstructor {\n  new (response: HttpContext, message: string): any;\n}\n\nexport interface AuthenticatorInterface<AuthParams> {\n  (authParams?: AuthParams): HttpInterceptorInterface<\n    RequestOptions | undefined\n  >;\n}\n\nexport interface RequestBuilder<BaseUrlParamType, AuthParams> {\n  deprecated(methodName: string, message?: string): void;\n  prepareArgs: typeof prepareArgs;\n  method(httpMethodName: HttpMethod): void;\n  baseUrl(arg: BaseUrlParamType): void;\n  authenticate(params: AuthParams): void;\n  appendPath(path: string): void;\n  appendTemplatePath(\n    strings: TemplateStringsArray,\n    ...args: Array<PathTemplateTypes>\n  ): void;\n  acceptJson(): void;\n  accept(acceptHeaderValue: string): void;\n  contentType(contentTypeHeaderValue: string): void;\n  header(name: string, value?: string | boolean | number): void;\n  headers(headersToMerge: Record<string, string>): void;\n  query(name: string, value: QueryValue): void;\n  query(parameters?: Record<string, QueryValue> | null): void;\n  form(parameters: Record<string, unknown>): void;\n  formData(parameters: Record<string, unknown>): void;\n  text(body: string): void;\n  json(data: unknown): void;\n  xml<T>(\n    argName: string,\n    data: T,\n    rootName: string,\n    schema: Schema<T, any>\n  ): void;\n  stream(file?: FileWrapper): void;\n  toRequest(): HttpRequest;\n  intercept(\n    interceptor: HttpInterceptorInterface<RequestOptions | undefined>\n  ): void;\n  interceptRequest(interceptor: (request: HttpRequest) => HttpRequest): void;\n  interceptResponse(interceptor: (response: HttpContext) => HttpContext): void;\n  defaultToError(apiErrorCtor: ApiErrorConstructor): void;\n  validateResponse(validate: boolean): void;\n  throwOn<ErrorCtorArgs extends any[]>(\n    statusCode: number | [number, number],\n    errorConstructor: {\n      new (response: HttpContext, ...args: ErrorCtorArgs): any;\n    },\n    ...args: ErrorCtorArgs\n  ): void;\n  call(requestOptions?: RequestOptions): Promise<ApiResponse<void>>;\n  callAsJson<T>(\n    schema: Schema<T, any>,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<T>>;\n  callAsStream(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<NodeJS.ReadableStream | Blob>>;\n  callAsText(requestOptions?: RequestOptions): Promise<ApiResponse<string>>;\n  callAsOptionalText(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<string | undefined>>;\n  callAsXml<T>(\n    rootName: string,\n    schema: Schema<T, any>,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<T>>;\n  callAsXml<T>(\n    rootName: string,\n    schema: Schema<T, any>,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<T>>;\n}\n\nexport class DefaultRequestBuilder<BaseUrlParamType, AuthParams>\n  implements RequestBuilder<BaseUrlParamType, AuthParams> {\n  protected _accept?: string;\n  protected _contentType?: string;\n  protected _headers: Record<string, string>;\n  protected _body?: string;\n  protected _stream?: FileWrapper;\n  protected _query: string[];\n  protected _form?: HttpRequestUrlEncodedFormBody['content'];\n  protected _formData?: HttpRequestMultipartFormBody['content'];\n  protected _baseUrlArg: BaseUrlParamType | undefined;\n  protected _validateResponse: boolean;\n  protected _interceptors: HttpInterceptorInterface<\n    RequestOptions | undefined\n  >[];\n  protected _authParams?: AuthParams;\n  public prepareArgs: typeof prepareArgs;\n\n  constructor(\n    protected _httpClient: HttpClientInterface,\n    protected _baseUrlProvider: (arg?: BaseUrlParamType) => string,\n    protected _apiErrorFactory: ApiErrorConstructor,\n    protected _authenticationProvider: AuthenticatorInterface<AuthParams>,\n    protected _httpMethod: HttpMethod,\n    protected _path?: string\n  ) {\n    this._headers = {};\n    this._query = [];\n    this._interceptors = [];\n    this._validateResponse = true;\n    this._addResponseValidator();\n    this._addAuthentication();\n    this.prepareArgs = prepareArgs.bind(this);\n  }\n  authenticate(params: AuthParams): void {\n    this._authParams = params;\n  }\n  deprecated(methodName: string, message?: string): void {\n    deprecated(methodName, message);\n  }\n  appendTemplatePath(\n    strings: TemplateStringsArray,\n    ...args: Array<PathTemplateTypes>\n  ): void {\n    const pathSegment = pathTemplate(strings, ...args);\n    this.appendPath(pathSegment);\n  }\n  method(httpMethodName: HttpMethod): void {\n    this._httpMethod = httpMethodName;\n  }\n  baseUrl(arg: BaseUrlParamType): void {\n    this._baseUrlArg = arg;\n  }\n  appendPath(path: string): void {\n    this._path = this._path ? mergePath(this._path, path) : path;\n  }\n  acceptJson(): void {\n    this._accept = JSON_CONTENT_TYPE;\n  }\n  accept(acceptHeaderValue: string): void {\n    this._accept = acceptHeaderValue;\n  }\n  contentType(contentTypeHeaderValue: string): void {\n    this._contentType = contentTypeHeaderValue;\n  }\n  header(name: string, value?: string | boolean | number): void {\n    if (value === undefined) {\n      return;\n    }\n    setHeader(this._headers, name, value.toString());\n  }\n  headers(headersToMerge: Record<string, string>): void {\n    mergeHeaders(this._headers, headersToMerge);\n  }\n  query(name: string, value: QueryValue): void;\n  query(parameters?: Record<string, QueryValue> | null): void;\n  query(\n    nameOrParameters: string | Record<string, QueryValue> | null | undefined,\n    value?: unknown\n  ): void {\n    if (nameOrParameters === null || nameOrParameters === undefined) return;\n    const queryString =\n      typeof nameOrParameters === 'string'\n        ? urlEncodeObject({\n            [nameOrParameters]: value,\n          })\n        : urlEncodeObject(nameOrParameters);\n    if (queryString) {\n      this._query.push(queryString);\n    }\n  }\n  text(body: string): void {\n    this._body = body;\n    this._setContentTypeIfNotSet(TEXT_CONTENT_TYPE);\n  }\n  json(data: unknown): void {\n    this._body = JSON.stringify(data);\n    this._setContentTypeIfNotSet(JSON_CONTENT_TYPE);\n  }\n  xml<T>(\n    argName: string,\n    data: T,\n    rootName: string,\n    schema: Schema<T, any>\n  ): void {\n    const mappingResult = validateAndUnmapXml(data, schema);\n    if (mappingResult.errors) {\n      throw new ArgumentsValidationError({ [argName]: mappingResult.errors });\n    }\n    this._body = xmlSerialize(rootName, mappingResult.result);\n    this._setContentTypeIfNotSet(XML_CONTENT_TYPE);\n  }\n  stream(file?: FileWrapper): void {\n    this._stream = file;\n  }\n  form(parameters: Record<string, unknown>): void {\n    this._form = filterFileWrapperFromKeyValuePairs(\n      formDataEncodeObject(parameters)\n    );\n  }\n  formData(parameters: Record<string, unknown>): void {\n    this._formData = formDataEncodeObject(parameters);\n  }\n  toRequest(): HttpRequest {\n    const request: HttpRequest = {\n      method: this._httpMethod,\n      url: mergePath(this._baseUrlProvider(this._baseUrlArg), this._path),\n    };\n\n    if (this._query.length > 0) {\n      const queryString = this._query.join('&');\n      request.url +=\n        (request.url.indexOf('?') === -1 ? '?' : '&') + queryString;\n    }\n\n    request.url = sanitizeUrl(request.url);\n\n    // defensively copy headers\n    const headers = { ...this._headers };\n\n    if (this._accept) {\n      setHeader(headers, ACCEPT_HEADER, this._accept);\n    }\n\n    if (this._contentType) {\n      setHeader(headers, CONTENT_TYPE_HEADER, this._contentType);\n    }\n\n    setHeader(headers, CONTENT_LENGTH_HEADER);\n\n    request.headers = headers;\n\n    if (this._body !== undefined) {\n      request.body = { type: 'text', content: this._body };\n    } else if (this._form !== undefined) {\n      request.body = { type: 'form', content: this._form };\n    } else if (this._formData !== undefined) {\n      request.body = { type: 'form-data', content: this._formData };\n    } else if (this._stream !== undefined) {\n      request.body = { type: 'stream', content: this._stream };\n    }\n\n    return request;\n  }\n  intercept(\n    interceptor: HttpInterceptorInterface<RequestOptions | undefined>\n  ): void {\n    this._interceptors.push(interceptor);\n  }\n  interceptRequest(\n    interceptor: (httpRequest: HttpRequest) => HttpRequest\n  ): void {\n    this.intercept((req, opt, next) => next(interceptor(req), opt));\n  }\n  interceptResponse(interceptor: (response: HttpContext) => HttpContext): void {\n    this.intercept(async (req, opt, next) => interceptor(await next(req, opt)));\n  }\n  defaultToError(apiErrorCtor: ApiErrorConstructor): void {\n    this._apiErrorFactory = apiErrorCtor;\n  }\n  validateResponse(validate: boolean): void {\n    this._validateResponse = validate;\n  }\n  throwOn<ErrorCtorArgs extends any[]>(\n    statusCode: number | [number, number],\n    errorConstructor: {\n      new (response: HttpContext, ...args: ErrorCtorArgs): any;\n    },\n    ...args: ErrorCtorArgs\n  ): void {\n    this.interceptResponse(context => {\n      const { response } = context;\n      if (\n        (typeof statusCode === 'number' &&\n          response.statusCode === statusCode) ||\n        (typeof statusCode !== 'number' &&\n          response.statusCode >= statusCode[0] &&\n          response.statusCode <= statusCode[1])\n      ) {\n        throw new errorConstructor(context, ...args);\n      }\n      return context;\n    });\n  }\n  async call(requestOptions?: RequestOptions): Promise<ApiResponse<void>> {\n    // Prepare the HTTP pipeline\n    const pipeline = callHttpInterceptors(\n      this._interceptors,\n      async (request, opt) => {\n        const response = await this._httpClient(request, opt);\n        return { request, response };\n      }\n    );\n\n    // Execute HTTP pipeline\n    const { request, response } = await pipeline(\n      this.toRequest(),\n      requestOptions\n    );\n\n    return { ...response, request, result: undefined };\n  }\n  async callAsText(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<string>> {\n    const result = await this.call(requestOptions);\n    if (typeof result.body !== 'string') {\n      throw new Error('Could not parse body as string.'); // TODO: Replace with SDK error\n    }\n    return { ...result, result: result.body };\n  }\n  async callAsOptionalText(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<string | undefined>> {\n    const result = await this.call(requestOptions);\n    if (typeof result.body !== 'string') {\n      return { ...result, result: undefined };\n    }\n    return { ...result, result: result.body };\n  }\n  async callAsStream(\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<NodeJS.ReadableStream | Blob>> {\n    this.interceptRequest(req => ({ ...req, responseType: 'stream' }));\n    const result = await this.call(requestOptions);\n    return { ...result, result: convertToStream(result.body) };\n  }\n  async callAsJson<T>(\n    schema: Schema<T>,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<T>> {\n    this.interceptRequest(request => {\n      const headers = { ...request.headers };\n      setHeaderIfNotSet(headers, ACCEPT_HEADER, JSON_CONTENT_TYPE);\n      return { ...request, headers };\n    });\n    const result = await this.call(requestOptions);\n    if (result.body === '') {\n      throw new Error(\n        'Could not parse body as JSON. The response body is empty.'\n      );\n    }\n    if (typeof result.body !== 'string') {\n      throw new Error(\n        'Could not parse body as JSON. The response body is not a string.'\n      );\n    }\n    let parsed: unknown;\n    try {\n      parsed = JSON.parse(result.body);\n    } catch (error) {\n      throw new Error(`Could not parse body as JSON.\\n\\n${error.message}`);\n    }\n    const mappingResult = validateAndMap(parsed, schema);\n    if (mappingResult.errors) {\n      throw new ResponseValidationError(result, mappingResult.errors);\n    }\n    return { ...result, result: mappingResult.result };\n  }\n  async callAsXml<T>(\n    rootName: string,\n    schema: Schema<T, any>,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<T>> {\n    this.interceptRequest(request => {\n      const headers = { ...request.headers };\n      setHeaderIfNotSet(headers, ACCEPT_HEADER, XML_CONTENT_TYPE);\n      return { ...request, headers };\n    });\n    const result = await this.call(requestOptions);\n    if (result.body === '') {\n      throw new Error(\n        'Could not parse body as XML. The response body is empty.'\n      );\n    }\n    if (typeof result.body !== 'string') {\n      throw new Error(\n        'Could not parse body as XML. The response body is not a string.'\n      );\n    }\n    let xmlObject: unknown;\n    try {\n      xmlObject = await xmlDeserialize(rootName, result.body);\n    } catch (error) {\n      throw new Error(`Could not parse body as XML.\\n\\n${error.message}`);\n    }\n    const mappingResult = validateAndMapXml(xmlObject, schema);\n    if (mappingResult.errors) {\n      throw new ResponseValidationError(result, mappingResult.errors);\n    }\n    return { ...result, result: mappingResult.result };\n  }\n  private _setContentTypeIfNotSet(contentType: string) {\n    if (!this._contentType) {\n      setHeaderIfNotSet(this._headers, CONTENT_TYPE_HEADER, contentType);\n    }\n  }\n  private _addResponseValidator(): void {\n    this.interceptResponse(context => {\n      const { response } = context;\n      if (\n        this._validateResponse &&\n        (response.statusCode < 200 || response.statusCode >= 300)\n      ) {\n        throw new this._apiErrorFactory(\n          context,\n          `Response status code was not ok: ${response.statusCode}.`\n        );\n      }\n      return context;\n    });\n  }\n  private _addAuthentication() {\n    this.intercept((...args) => {\n      const handler = this._authenticationProvider(this._authParams);\n      return handler(...args);\n    });\n  }\n}\n\nexport function createRequestBuilderFactory<BaseUrlParamType, AuthParams>(\n  httpClient: HttpClientInterface,\n  baseUrlProvider: (arg?: BaseUrlParamType) => string,\n  apiErrorFactory: ApiErrorConstructor,\n  authenticationProvider: AuthenticatorInterface<AuthParams>\n): RequestBuilderFactory<BaseUrlParamType, AuthParams> {\n  return (httpMethod, path?) => {\n    return new DefaultRequestBuilder(\n      httpClient,\n      baseUrlProvider,\n      apiErrorFactory,\n      authenticationProvider,\n      httpMethod,\n      path\n    );\n  };\n}\n\nfunction mergePath(left: string, right?: string): string {\n  if (!right || right === '') {\n    return left;\n  }\n\n  if (left[left.length - 1] === '/' && right[0] === '/') {\n    return left + right.substr(1);\n  } else if (left[left.length - 1] === '/' || right[0] === '/') {\n    return left + right;\n  } else {\n    return `${left}/${right}`;\n  }\n}\n\nexport function convertToStream(\n  content: string | Blob | NodeJS.ReadableStream\n): Blob | NodeJS.ReadableStream {\n  if (typeof content !== 'string') {\n    return content;\n  }\n\n  if (isNode) {\n    // ref: https://stackoverflow.com/a/22085851\n    const rs = new (require('stream').Readable)();\n    rs._read = () => {};\n    rs.push(content);\n    rs.push(null);\n    return rs;\n  }\n\n  return new Blob([content]);\n}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { basicAuthAuthenticationProvider } from './authentication';\nimport {\n  AuthParams,\n  ClientInterface,\n  SdkRequestBuilder,\n  SdkRequestBuilderFactory,\n  Server,\n} from './clientInterface';\nimport { Configuration, Environment } from './configuration';\nimport { DEFAULT_CONFIGURATION } from './defaultConfiguration';\nimport { ApiError } from './errors/apiError';\nimport { HttpClient } from './http/httpClient';\nimport { pathTemplate, SkipEncode } from './http/pathTemplate';\nimport {\n  AuthenticatorInterface,\n  createRequestBuilderFactory,\n  HttpClientInterface,\n} from './http/requestBuilder';\n\nconst USER_AGENT = 'node-messaging';\n\nexport class Client implements ClientInterface {\n  private _config: Readonly<Configuration>;\n  private _requestBuilderFactory: SdkRequestBuilderFactory;\n\n  constructor(config?: Partial<Configuration>) {\n    this._config = {\n      ...DEFAULT_CONFIGURATION,\n      ...config,\n    };\n    this._requestBuilderFactory = createRequestHandlerFactory(\n      server => getBaseUri(server, this._config),\n      basicAuthAuthenticationProvider(this._config),\n      new HttpClient({\n        timeout: this._config.timeout,\n        clientConfigOverrides: this._config.unstable_httpClientOptions,\n      }),\n      [\n        withErrorHandlers,\n        withUserAgent,\n        withAuthenticationByDefault,\n      ]\n    );\n  }\n\n  public getRequestBuilderFactory(): SdkRequestBuilderFactory {\n    return this._requestBuilderFactory;\n  }\n\n  /**\n   * Clone this client and override given configuration options\n   */\n  public withConfiguration(config: Partial<Configuration>) {\n    return new Client({ ...this._config, ...config });\n  }\n}\n\nfunction createHttpClientAdapter(client: HttpClient): HttpClientInterface {\n  return async (request, requestOptions) => {\n    return await client.executeRequest(request, requestOptions);\n  };\n}\n\nfunction getBaseUri(server: Server = 'MessagingDefault', config: Configuration): string {\n  if (config.environment === Environment.Production) {\n    if (server === 'MessagingDefault') {\n      return 'https://messaging.bandwidth.com/api/v2';\n    }\n  }\n  if (config.environment === Environment.Custom) {\n    if (server === 'MessagingDefault') {\n      return pathTemplate`${new SkipEncode(config.baseUrl)}`;\n    }\n  }\n  throw new Error('Could not get Base URL. Invalid environment or server.');\n}\n\nfunction createRequestHandlerFactory(\n  baseUrlProvider: (server?: Server) => string,\n  authProvider: AuthenticatorInterface<AuthParams>,\n  httpClient: HttpClient,\n  addons: ((rb: SdkRequestBuilder) => void)[]\n): SdkRequestBuilderFactory {\n  const requestBuilderFactory = createRequestBuilderFactory(\n    createHttpClientAdapter(httpClient),\n    baseUrlProvider,\n    ApiError,\n    authProvider\n  );\n\n  return tap(requestBuilderFactory, ...addons);\n}\n\nfunction tap(\n  requestBuilderFactory: SdkRequestBuilderFactory,\n  ...callback: ((requestBuilder: SdkRequestBuilder) => void)[]\n): SdkRequestBuilderFactory {\n  return (...args) => {\n    const requestBuilder = requestBuilderFactory(...args);\n    callback.forEach(c => c(requestBuilder));\n    return requestBuilder;\n  };\n}\n\nfunction withErrorHandlers(rb: SdkRequestBuilder) {\n  rb.defaultToError(ApiError);\n}\n\nfunction withUserAgent(rb: SdkRequestBuilder) {\n  rb.header('user-agent', USER_AGENT);\n}\n\nfunction withAuthenticationByDefault(rb: SdkRequestBuilder) {\n  rb.authenticate(true);\n}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { ApiError } from './apiError';\n\n/**\n * Creates an instance of MessagingException\n */\n interface MessagingException {\n  type: string;\n  description: string;\n}\n\nexport class MessagingExceptionError extends ApiError<MessagingException> {}\n\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { array, number, object, optional, Schema, string } from '../schema';\n\nexport interface BandwidthMessage {\n  /** The id of the message */\n  id?: string;\n  /** The Bandwidth phone number associated with the message */\n  owner?: string;\n  /** The application ID associated with the message */\n  applicationId?: string;\n  /** The datetime stamp of the message in ISO 8601 */\n  time?: string;\n  /** The number of segments the original message from the user is broken into before sending over to carrier networks */\n  segmentCount?: number;\n  /** The direction of the message relative to Bandwidth. Can be in or out */\n  direction?: string;\n  /** The phone number recipients of the message */\n  to?: string[];\n  /** The phone number the message was sent from */\n  from?: string;\n  /** The list of media URLs sent in the message */\n  media?: string[];\n  /** The contents of the message */\n  text?: string;\n  /** The custom string set by the user */\n  tag?: string;\n  /** The priority specified by the user */\n  priority?: string;\n}\n\nexport const bandwidthMessageSchema: Schema<BandwidthMessage> = object({\n  id: ['id', optional(string())],\n  owner: ['owner', optional(string())],\n  applicationId: ['applicationId', optional(string())],\n  time: ['time', optional(string())],\n  segmentCount: ['segmentCount', optional(number())],\n  direction: ['direction', optional(string())],\n  to: ['to', optional(array(string()))],\n  from: ['from', optional(string())],\n  media: ['media', optional(array(string()))],\n  text: ['text', optional(string())],\n  tag: ['tag', optional(string())],\n  priority: ['priority', optional(string())],\n});\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { number, object, optional, Schema, string, nullable } from '../schema';\n\nexport interface BandwidthMessageItem {\n  /** The message id */\n  messageId?: string;\n  /** The account id of the message */\n  accountId?: string;\n  /** The source phone number of the message */\n  sourceTn?: string;\n  /** The recipient phone number of the message */\n  destinationTn?: string;\n  /** The status of the message */\n  messageStatus?: string;\n  /** The direction of the message relative to Bandwidth. INBOUND or OUTBOUND */\n  messageDirection?: string;\n  /** The type of message. sms or mms */\n  messageType?: string;\n  /** The number of segments the message was sent as */\n  segmentCount?: number;\n  /** The numeric error code of the message */\n  errorCode?: number;\n  /** The ISO 8601 datetime of the message */\n  receiveTime?: string;\n  /** The name of the carrier. Not currently supported for MMS, coming soon */\n  carrierName?: string | null;\n}\n\nexport const bandwidthMessageItemSchema: Schema<BandwidthMessageItem> = object({\n  messageId: ['messageId', optional(string())],\n  accountId: ['accountId', optional(string())],\n  sourceTn: ['sourceTn', optional(string())],\n  destinationTn: ['destinationTn', optional(string())],\n  messageStatus: ['messageStatus', optional(string())],\n  messageDirection: ['messageDirection', optional(string())],\n  messageType: ['messageType', optional(string())],\n  segmentCount: ['segmentCount', optional(number())],\n  errorCode: ['errorCode', optional(number())],\n  receiveTime: ['receiveTime', optional(string())],\n  carrierName: ['carrierName', nullable(optional(string()))],\n});\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { object, optional, Schema, string } from '../schema';\n\nexport interface PageInfo {\n  /** The link to the previous page for pagination */\n  prevPage?: string;\n  /** The link to the next page for pagination */\n  nextPage?: string;\n  /** The isolated pagination token for the previous page */\n  prevPageToken?: string;\n  /** The isolated pagination token for the next page */\n  nextPageToken?: string;\n}\n\nexport const pageInfoSchema: Schema<PageInfo> = object({\n  prevPage: ['prevPage', optional(string())],\n  nextPage: ['nextPage', optional(string())],\n  prevPageToken: ['prevPageToken', optional(string())],\n  nextPageToken: ['nextPageToken', optional(string())],\n});\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { array, lazy, number, object, optional, Schema } from '../schema';\nimport {\n  BandwidthMessageItem,\n  bandwidthMessageItemSchema,\n} from './bandwidthMessageItem';\nimport { PageInfo, pageInfoSchema } from './pageInfo';\n\nexport interface BandwidthMessagesList {\n  /** Total number of messages matched by the search */\n  totalCount?: number;\n  pageInfo?: PageInfo;\n  messages?: BandwidthMessageItem[];\n}\n\nexport const bandwidthMessagesListSchema: Schema<BandwidthMessagesList> = object(\n  {\n    totalCount: ['totalCount', optional(number())],\n    pageInfo: ['pageInfo', optional(lazy(() => pageInfoSchema))],\n    messages: [\n      'messages',\n      optional(array(lazy(() => bandwidthMessageItemSchema))),\n    ],\n  }\n);\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { number, object, optional, Schema, string } from '../schema';\n\nexport interface Media {\n  content?: string;\n  contentLength?: number;\n  mediaName?: string;\n}\n\nexport const mediaSchema: Schema<Media> = object({\n  content: ['content', optional(string())],\n  contentLength: ['contentLength', optional(number())],\n  mediaName: ['mediaName', optional(string())],\n});\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { Schema, stringEnum } from '../schema';\n\n/**\n * Enum for PriorityEnum\n */\nexport enum PriorityEnum {\n  Default = 'default',\n  High = 'high',\n}\n\n/**\n * Schema for PriorityEnum\n */\nexport const priorityEnumSchema: Schema<PriorityEnum> = stringEnum(PriorityEnum);\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { array, object, optional, Schema, string } from '../schema';\nimport { PriorityEnum, priorityEnumSchema } from './priorityEnum';\n\nexport interface MessageRequest {\n  /** The ID of the Application your from number is associated with in the Bandwidth Phone Number Dashboard. */\n  applicationId: string;\n  /** The phone number(s) the message should be sent to in E164 format */\n  to: string[];\n  /** One of your telephone numbers the message should come from in E164 format */\n  from: string;\n  /** The contents of the text message. Must be 2048 characters or less. */\n  text?: string;\n  /** A list of URLs to include as media attachments as part of the message. */\n  media?: string[];\n  /** A custom string that will be included in callback events of the message. Max 1024 characters */\n  tag?: string;\n  /** The message's priority, currently for toll-free or short code SMS only. Messages with a priority value of `\"high\"` are given preference over your other traffic. */\n  priority?: PriorityEnum;\n}\n\nexport const messageRequestSchema: Schema<MessageRequest> = object({\n  applicationId: ['applicationId', string()],\n  to: ['to', array(string())],\n  from: ['from', string()],\n  text: ['text', optional(string())],\n  media: ['media', optional(array(string()))],\n  tag: ['tag', optional(string())],\n  priority: ['priority', optional(priorityEnumSchema)],\n});\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { ClientInterface, SdkRequestBuilderFactory } from '../clientInterface';\n\n/** Base class for all controllers */\nexport class BaseController {\n  /** Create a request builder */\n  protected createRequest: SdkRequestBuilderFactory;\n\n  constructor(client: ClientInterface) {\n    this.createRequest = client.getRequestBuilderFactory();\n  }\n}\n","/**\n * bandwidthLib\n *\n * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).\n */\n\nimport { ApiResponse } from '../apiResponse';\nimport { MessagingExceptionError } from '../errors/messagingExceptionError';\nimport { FileWrapper } from '../fileWrapper';\nimport { RequestOptions } from '../http/requestBuilder';\nimport {\n  BandwidthMessage,\n  bandwidthMessageSchema,\n} from '../models/bandwidthMessage';\nimport {\n  BandwidthMessagesList,\n  bandwidthMessagesListSchema,\n} from '../models/bandwidthMessagesList';\nimport { Media, mediaSchema } from '../models/media';\nimport { MessageRequest, messageRequestSchema } from '../models/messageRequest';\nimport { array, number, optional, string } from '../schema';\nimport { BaseController } from './baseController';\n\nexport class ApiController extends BaseController {\n  /**\n   * listMedia\n   *\n   * @param accountId          User's account ID\n   * @param continuationToken  Continuation token used to retrieve subsequent media.\n   * @return Response from the API call\n   */\n  async listMedia(\n    accountId: string,\n    continuationToken?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<Media[]>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      accountId: [accountId, string()],\n      continuationToken: [continuationToken, optional(string())],\n    });\n    req.header('Continuation-Token', mapped.continuationToken);\n    req.appendTemplatePath`/users/${mapped.accountId}/media`;\n    req.throwOn(400, MessagingExceptionError, '400 Request is malformed or invalid');\n    req.throwOn(401, MessagingExceptionError, '401 The specified user does not have access to the account');\n    req.throwOn(403, MessagingExceptionError, '403 The user does not have access to this API');\n    req.throwOn(404, MessagingExceptionError, '404 Path not found');\n    req.throwOn(415, MessagingExceptionError, '415 The content-type of the request is incorrect');\n    req.throwOn(429, MessagingExceptionError, '429 The rate limit has been reached');\n    return req.callAsJson(array(mediaSchema), requestOptions);\n  }\n\n  /**\n   * getMedia\n   *\n   * @param accountId User's account ID\n   * @param mediaId   Media ID to retrieve\n   * @return Response from the API call\n   */\n  async getMedia(\n    accountId: string,\n    mediaId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<NodeJS.ReadableStream | Blob>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      accountId: [accountId, string()],\n      mediaId: [mediaId, string()],\n    });\n    req.appendTemplatePath`/users/${mapped.accountId}/media/${mapped.mediaId}`;\n    req.throwOn(400, MessagingExceptionError, '400 Request is malformed or invalid');\n    req.throwOn(401, MessagingExceptionError, '401 The specified user does not have access to the account');\n    req.throwOn(403, MessagingExceptionError, '403 The user does not have access to this API');\n    req.throwOn(404, MessagingExceptionError, '404 Path not found');\n    req.throwOn(415, MessagingExceptionError, '415 The content-type of the request is incorrect');\n    req.throwOn(429, MessagingExceptionError, '429 The rate limit has been reached');\n    return req.callAsStream(requestOptions);\n  }\n\n  /**\n   * uploadMedia\n   *\n   * @param accountId     User's account ID\n   * @param mediaId       The user supplied custom media ID\n   * @param body\n   * @param contentType   The media type of the entity-body\n   * @param cacheControl  General-header field is used to specify directives that MUST be obeyed by all\n   *                                     caching mechanisms along the request/response chain.\n   * @return Response from the API call\n   */\n  async uploadMedia(\n    accountId: string,\n    mediaId: string,\n    body: FileWrapper,\n    contentType?: string,\n    cacheControl?: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<void>> {\n    const req = this.createRequest('PUT');\n    const mapped = req.prepareArgs({\n      accountId: [accountId, string()],\n      mediaId: [mediaId, string()],\n      contentType: [contentType, optional(string())],\n      cacheControl: [cacheControl, optional(string())],\n    });\n    req.header('Content-Type', mapped.contentType);\n    req.header('Cache-Control', mapped.cacheControl);\n    req.stream(body);\n    req.appendTemplatePath`/users/${mapped.accountId}/media/${mapped.mediaId}`;\n    req.throwOn(400, MessagingExceptionError, '400 Request is malformed or invalid');\n    req.throwOn(401, MessagingExceptionError, '401 The specified user does not have access to the account');\n    req.throwOn(403, MessagingExceptionError, '403 The user does not have access to this API');\n    req.throwOn(404, MessagingExceptionError, '404 Path not found');\n    req.throwOn(415, MessagingExceptionError, '415 The content-type of the request is incorrect');\n    req.throwOn(429, MessagingExceptionError, '429 The rate limit has been reached');\n    return req.call(requestOptions);\n  }\n\n  /**\n   * deleteMedia\n   *\n   * @param accountId User's account ID\n   * @param mediaId   The media ID to delete\n   * @return Response from the API call\n   */\n  async deleteMedia(\n    accountId: string,\n    mediaId: string,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<void>> {\n    const req = this.createRequest('DELETE');\n    const mapped = req.prepareArgs({\n      accountId: [accountId, string()],\n      mediaId: [mediaId, string()],\n    });\n    req.appendTemplatePath`/users/${mapped.accountId}/media/${mapped.mediaId}`;\n    req.throwOn(400, MessagingExceptionError, '400 Request is malformed or invalid');\n    req.throwOn(401, MessagingExceptionError, '401 The specified user does not have access to the account');\n    req.throwOn(403, MessagingExceptionError, '403 The user does not have access to this API');\n    req.throwOn(404, MessagingExceptionError, '404 Path not found');\n    req.throwOn(415, MessagingExceptionError, '415 The content-type of the request is incorrect');\n    req.throwOn(429, MessagingExceptionError, '429 The rate limit has been reached');\n    return req.call(requestOptions);\n  }\n\n  /**\n   * getMessages\n   *\n   * @param accountId     User's account ID\n   * @param messageId     The ID of the message to search for. Special characters need to be encoded using\n   *                                URL encoding\n   * @param sourceTn      The phone number that sent the message\n   * @param destinationTn The phone number that received the message\n   * @param messageStatus The status of the message. One of RECEIVED, QUEUED, SENDING, SENT, FAILED,\n   *                                DELIVERED, ACCEPTED, UNDELIVERED\n   * @param errorCode     The error code of the message\n   * @param fromDateTime  The start of the date range to search in ISO 8601 format. Uses the message receive\n   *                                time. The date range to search in is currently 14 days.\n   * @param toDateTime    The end of the date range to search in ISO 8601 format. Uses the message receive\n   *                                time. The date range to search in is currently 14 days.\n   * @param pageToken     A base64 encoded value used for pagination of results\n   * @param limit         The maximum records requested in search result. Default 100. The sum of limit and\n   *                                after cannot be more than 10000\n   * @return Response from the API call\n   */\n  async getMessages(\n    accountId: string,\n    messageId?: string,\n    sourceTn?: string,\n    destinationTn?: string,\n    messageStatus?: string,\n    errorCode?: number,\n    fromDateTime?: string,\n    toDateTime?: string,\n    pageToken?: string,\n    limit?: number,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BandwidthMessagesList>> {\n    const req = this.createRequest('GET');\n    const mapped = req.prepareArgs({\n      accountId: [accountId, string()],\n      messageId: [messageId, optional(string())],\n      sourceTn: [sourceTn, optional(string())],\n      destinationTn: [destinationTn, optional(string())],\n      messageStatus: [messageStatus, optional(string())],\n      errorCode: [errorCode, optional(number())],\n      fromDateTime: [fromDateTime, optional(string())],\n      toDateTime: [toDateTime, optional(string())],\n      pageToken: [pageToken, optional(string())],\n      limit: [limit, optional(number())],\n    });\n    req.query('messageId', mapped.messageId);\n    req.query('sourceTn', mapped.sourceTn);\n    req.query('destinationTn', mapped.destinationTn);\n    req.query('messageStatus', mapped.messageStatus);\n    req.query('errorCode', mapped.errorCode);\n    req.query('fromDateTime', mapped.fromDateTime);\n    req.query('toDateTime', mapped.toDateTime);\n    req.query('pageToken', mapped.pageToken);\n    req.query('limit', mapped.limit);\n    req.appendTemplatePath`/users/${mapped.accountId}/messages`;\n    req.throwOn(400, MessagingExceptionError, '400 Request is malformed or invalid');\n    req.throwOn(401, MessagingExceptionError, '401 The specified user does not have access to the account');\n    req.throwOn(403, MessagingExceptionError, '403 The user does not have access to this API');\n    req.throwOn(404, MessagingExceptionError, '404 Path not found');\n    req.throwOn(415, MessagingExceptionError, '415 The content-type of the request is incorrect');\n    req.throwOn(429, MessagingExceptionError, '429 The rate limit has been reached');\n    return req.callAsJson(bandwidthMessagesListSchema, requestOptions);\n  }\n\n  /**\n   * createMessage\n   *\n   * @param accountId User's account ID\n   * @param body\n   * @return Response from the API call\n   */\n  async createMessage(\n    accountId: string,\n    body: MessageRequest,\n    requestOptions?: RequestOptions\n  ): Promise<ApiResponse<BandwidthMessage>> {\n    const req = this.createRequest('POST');\n    const mapped = req.prepareArgs({\n      accountId: [accountId, string()],\n      body: [body, messageRequestSchema],\n    });\n    req.json(mapped.body);\n    req.appendTemplatePath`/users/${mapped.accountId}/messages`;\n    req.throwOn(400, MessagingExceptionError, '400 Request is malformed or invalid');\n    req.throwOn(401, MessagingExceptionError, '401 The specified user does not have access to the account');\n    req.throwOn(403, MessagingExceptionError, '403 The user does not have access to this API');\n    req.throwOn(404, MessagingExceptionError, '404 Path not found');\n    req.throwOn(415, MessagingExceptionError, '415 The content-type of the request is incorrect');\n    req.throwOn(429, MessagingExceptionError, '429 The rate limit has been reached');\n    return req.callAsJson(bandwidthMessageSchema, requestOptions);\n  }\n}\n"],"names":["callHttpInterceptors","interceptors","client","next","index","length","current","last","request","options","passThroughInterceptor","requestOptions","basicAuthAuthenticationProvider","basicAuthUserName","basicAuthPassword","requiresAuth","auth","username","password","Environment","DEFAULT_CONFIGURATION","timeout","environment","Production","baseUrl","ApiError","Error","constructor","context","message","response","statusCode","headers","body","JSON","JSONBig","useNativeBigInt","result","parse","error","console","warn","sanitizeUrl","url","protocolRegex","match","protocol","queryUrl","substring","replace","isBlob","value","Blob","Object","prototype","toString","call","deprecatedHits","deprecated","methodName","notice","warning","AbortError","FileWrapper","file","isFileWrapper","cloneFileWrapper","fileWrapper","cloneFileWrapperOptions","fileWrapperOptions","clone","setHeader","name","realHeaderName","lookupCaseInsensitive","setHeaderInternal","setHeaderIfNotSet","obj","prop","toLowerCase","p","hasOwnProperty","mergeHeaders","headersToMerge","headerKeys","headerName","getOwnPropertyNames","lowerCasedName","CONTENT_TYPE_HEADER","ACCEPT_HEADER","CONTENT_LENGTH_HEADER","FORM_URLENCODED_CONTENT_TYPE","JSON_CONTENT_TYPE","TEXT_CONTENT_TYPE","XML_CONTENT_TYPE","indexedPrefix","prefix","key","formDataEncodeObject","prefixFormat","keys","undefined","push","Array","isArray","iter","objectKey","element","filterFileWrapperFromKeyValuePairs","params","filter","urlEncodeObject","urlEncodeKeyValuePairs","encode","encodeURIComponent","map","join","DEFAULT_AXIOS_CONFIG_OVERRIDES","transformResponse","DEFAULT_TIMEOUT","HttpClient","clientConfigOverrides","_timeout","_axiosInstance","axios","create","convertHttpRequest","req","newRequest","method","responseType","requestBody","type","data","content","some","item","form","FormData","fileData","contentType","append","getHeaders","isNode","validateStatus","convertHttpResponse","resp","status","executeRequest","axiosRequest","abortSignal","aborted","abortError","cancelToken","CancelToken","source","token","addEventListener","cancel","isCancel","SkipEncode","pathTemplate","strings","args","values","flatMap","interweaveArrays","s","encodePathTemplateSegment","pathSegment","skipEncode","m","a","b","min","Math","apply","reduce","_","concat","slice","ArgumentsValidationError","errors","errorKeys","msgList","param","ResponseValidationError","apiResponse","e","i","prepareArgs","validationErrors","paramName","paramInfo","validationResult","validateAndUnmap","xmlSerialize","_rootName","_value","xmlDeserialize","_xmlString","DefaultRequestBuilder","_httpClient","_baseUrlProvider","_apiErrorFactory","_authenticationProvider","_httpMethod","_path","_headers","_query","_interceptors","_validateResponse","_addResponseValidator","_addAuthentication","bind","authenticate","_authParams","appendTemplatePath","appendPath","httpMethodName","arg","_baseUrlArg","path","mergePath","acceptJson","_accept","accept","acceptHeaderValue","contentTypeHeaderValue","_contentType","header","query","nameOrParameters","queryString","text","_body","_setContentTypeIfNotSet","json","stringify","xml","argName","rootName","schema","mappingResult","validateAndUnmapXml","stream","_stream","parameters","_form","formData","_formData","toRequest","indexOf","intercept","interceptor","interceptRequest","opt","interceptResponse","defaultToError","apiErrorCtor","validateResponse","validate","throwOn","errorConstructor","pipeline","callAsText","callAsOptionalText","callAsStream","convertToStream","callAsJson","parsed","validateAndMap","callAsXml","xmlObject","validateAndMapXml","handler","createRequestBuilderFactory","httpClient","baseUrlProvider","apiErrorFactory","authenticationProvider","httpMethod","left","right","substr","rs","require","Readable","_read","USER_AGENT","Client","config","_config","_requestBuilderFactory","createRequestHandlerFactory","server","getBaseUri","unstable_httpClientOptions","withErrorHandlers","withUserAgent","withAuthenticationByDefault","getRequestBuilderFactory","withConfiguration","createHttpClientAdapter","Custom","authProvider","addons","requestBuilderFactory","tap","callback","requestBuilder","forEach","c","rb","MessagingExceptionError","bandwidthMessageSchema","object","id","optional","string","owner","applicationId","time","segmentCount","number","direction","to","array","from","media","tag","priority","bandwidthMessageItemSchema","messageId","accountId","sourceTn","destinationTn","messageStatus","messageDirection","messageType","errorCode","receiveTime","carrierName","nullable","pageInfoSchema","prevPage","nextPage","prevPageToken","nextPageToken","bandwidthMessagesListSchema","totalCount","pageInfo","lazy","messages","mediaSchema","contentLength","mediaName","PriorityEnum","priorityEnumSchema","stringEnum","messageRequestSchema","BaseController","createRequest","ApiController","listMedia","continuationToken","mapped","getMedia","mediaId","uploadMedia","cacheControl","deleteMedia","getMessages","fromDateTime","toDateTime","pageToken","limit","createMessage"],"mappings":"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"}
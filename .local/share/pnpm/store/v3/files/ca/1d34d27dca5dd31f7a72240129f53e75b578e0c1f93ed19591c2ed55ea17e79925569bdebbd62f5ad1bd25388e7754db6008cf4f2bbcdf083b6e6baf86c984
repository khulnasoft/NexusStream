{"version":3,"file":"tsc-esm-fix.mjs","sources":["../../src/main/ts/fixes/fix-blank-files.ts","../../src/main/ts/fixes/fix-dirname-var.ts","../../src/main/ts/util.ts","../../src/main/ts/fixes/fix-module-ref.ts","../../src/main/ts/fixes/fix-sourcemap-ref.ts","../../src/main/ts/fixes/fix-default-export.ts","../../src/main/ts/fixes/index.ts","../../src/main/ts/finder.ts","../../src/main/ts/options.ts","../../src/main/ts/fix.ts","../../src/main/ts/legacy.ts"],"sourcesContent":["import {TFixer} from '../interface'\n\nexport const fixBlankFiles: TFixer = (ctx) => {\n  const {contents} = ctx\n  const _contents = contents.trim().length === 0\n    ? `\nexport {}\nexport default undefined\n`   : contents\n\n  return {...ctx, contents: _contents}\n}\n","import {TFixer} from '../interface'\n\nexport const fixDirnameVar: TFixer = (ctx) => {\n  const {contents, isSource} = ctx\n  const _contents = contents.replace(\n    /__dirname/g,\n    `\\`\\${process.platform === 'win32' ? '' : '/'}\\${/file:\\\\/{2,3}(.+)\\\\/[^/]/.exec(import.meta.url)${isSource ? '!' : ''}[1]}\\`` // eslint-disable-line\n  )\n\n  return {...ctx, contents: _contents}\n}\n\nexport const fixFilenameVar: TFixer = (ctx) => {\n  const {contents, isSource} = ctx\n  const _contents = contents\n    .replace(\n      /__filename/g,\n      `\\`\\${process.platform === 'win32' ? '' : '/'}\\${/file:\\\\/{2,3}(.+)/.exec(import.meta.url)${isSource ? '!' : ''}[1]}\\`` // eslint-disable-line\n    )\n  return {...ctx, contents: _contents}\n}\n","import { dirname, resolve } from 'node:path'\n\nimport fse from 'fs-extra'\nimport json5 from 'json5'\n\nimport { TSConfig } from './interface'\n\nexport { globby } from 'globby'\n\nexport { existsSync } from 'node:fs'\n\nexport const read = (file: string): string =>\n  fse.readFileSync(file, { encoding: 'utf8' })\n\nexport const write = (file: string, contents: string): void =>\n  fse.outputFileSync(file, contents, { encoding: 'utf8' })\n\nexport const readJson = <D = any>(file: string): D => json5.parse(read(file))\n\nexport const asArray = <T>(value: T[] | T | undefined): T[] =>\n  value ? (Array.isArray(value) ? value : [value]) : []\n\nexport const remove = fse.unlinkSync\n\nexport const unixify = (path: string): string => path.replace(/\\\\/g, '/')\n\nexport const resolveTsConfig = (file: string): TSConfig => {\n  const data = readJson<TSConfig>(file)\n\n  if (data.extends) {\n    const parent = resolveTsConfig(resolve(dirname(file), data.extends))\n\n    return {\n      ...parent,\n      ...data,\n      compilerOptions: { ...parent.compilerOptions, ...data.compilerOptions },\n    }\n  }\n\n  return data\n}\n","import {dirname, resolve} from 'node:path'\nimport {TFixer} from '../interface'\nimport {unixify} from '../util'\nimport { patchRefs } from 'depseek'\n\nexport const fixModuleReferences: TFixer = (ctx) => {\n  const { contents, filename, filenames, options: {cwd}, ignore } = ctx\n  const _contents = patchRefs(contents, (value) => {\n    const v = value.endsWith('/') ? value.slice(0, -1) : value\n    return (v.includes('/') || v === '.' || v === '..') && !ignore.includes(v)\n      ? resolveDependency(filename, v, filenames, cwd)\n      : value\n  })\n\n  return {...ctx, contents: _contents}\n}\n\nexport const resolveDependency = (\n  parent: string,\n  nested: string,\n  files: string[],\n  cwd: string,\n): string => {\n  const dir = dirname(parent)\n  const nmdir = resolve(cwd, 'node_modules')\n  const bases = /^\\..+\\.[^./\\\\]+$/.test(nested)\n    ? [nested, nested.replace(/\\.[^./\\\\]+$/, '')]\n    : [nested]\n  const variants = ['.js', '.cjs', '.mjs'].reduce<string[]>((m, e) => {\n    bases.forEach((v) => m.push(`${v}${e}`, `${v}/index${e}`))\n    return m\n  }, [])\n\n  return (\n    variants.find((f) => files.includes(unixify(resolve(dir, f)))) ||\n    variants.find((f) => files.includes(unixify(resolve(nmdir, f)))) ||\n    nested\n  )\n}\n","import {basename} from 'node:path'\nimport {TFixer} from '../interface'\n\nexport const fixSourceMapRef: TFixer = (ctx) => {\n  const { contents, originName, filename} = ctx\n  const _contents =\n    originName === filename\n      ? contents\n      : contents.replace(\n        `//# sourceMappingURL=${basename(originName)}.map`,\n        `//# sourceMappingURL=${basename(filename)}.map`\n      )\n\n  return {...ctx, contents: _contents}\n}\n","import {TFixer} from '../interface'\n\nexport const fixDefaultExport: TFixer = (ctx) => {\n  const {contents} = ctx\n  const _contents = contents.includes('export default')\n    ? contents\n    : `${contents}\nexport default undefined\n`\n  return {...ctx, contents: _contents}\n}\n","import {TFixer} from '../interface'\n\nexport {fixBlankFiles} from './fix-blank-files'\nexport {fixFilenameVar, fixDirnameVar} from './fix-dirname-var'\nexport {fixModuleReferences} from './fix-module-ref'\nexport {fixSourceMapRef} from './fix-sourcemap-ref'\nexport {fixDefaultExport} from './fix-default-export'\n\nimport { fixBlankFiles } from './fix-blank-files'\nimport { fixDefaultExport } from './fix-default-export'\nimport { fixDirnameVar, fixFilenameVar } from './fix-dirname-var'\nimport { fixModuleReferences } from './fix-module-ref'\nimport { fixSourceMapRef } from './fix-sourcemap-ref'\n\nexport const fixContents: TFixer = (\n  ctx\n) => {\n  const {options} = ctx\n\n  let _ctx = ctx\n\n  if (options.ext) _ctx = fixModuleReferences(_ctx)\n\n  if (options.dirnameVar) _ctx = fixDirnameVar(_ctx)\n\n  if (options.filenameVar) _ctx = fixFilenameVar(_ctx)\n\n  if (options.fillBlank) _ctx = fixBlankFiles(_ctx)\n\n  if (options.forceDefaultExport) _ctx = fixDefaultExport(_ctx)\n\n  if (options.sourceMap) _ctx = fixSourceMapRef(_ctx)\n\n  return _ctx\n}\n","import { dirname, join, resolve } from 'node:path'\nimport { asArray, globby, readJson, resolveTsConfig } from './util'\nimport { Options as GlobbyOptions } from 'globby'\n\nexport const getTsconfigTargets = (\n  tsconfig: string | string[],\n  cwd: string,\n): string[] =>\n  asArray(tsconfig).reduce<string[]>((targets, file) => {\n    const tsconfigJson = resolveTsConfig(resolve(cwd, file))\n    const outDir = tsconfigJson?.compilerOptions?.outDir\n    const module = tsconfigJson?.compilerOptions?.module.toLowerCase?.()\n\n    if (outDir && module.startsWith('es')) {\n      targets.push(outDir)\n    } else {\n      console.warn('tsconfig should declare `outDir` and `module` type es6 or above')\n    }\n\n    return targets\n  }, [])\n\nexport const getLocalModules = (sources: string[], targets: string[], cwd: string) => globby(\n  getPatterns(sources, targets),\n  {\n    cwd,\n    onlyFiles: true,\n    absolute: true,\n  } as GlobbyOptions)\n\nexport const getExternalModules = async (cwd: string): Promise<{cjsModules: string[], esmModules: string[], allPackages: string[] }> => {\n  const {names, files: esmModules} = await getExternalEsmModules(cwd)\n  const cjsModules = await globby(\n    [\n      '!node_modules/.cache',\n      '!node_modules/.bin',\n      '!node_modules/**/node_modules',\n      ...names.map(m => `!node_modules/${m}`),\n      'node_modules/**/*.(m|c)?js',\n    ],\n    {\n      cwd,\n      onlyFiles: true,\n      absolute: true,\n    } as GlobbyOptions,\n  )\n\n  return {\n    cjsModules,\n    esmModules,\n    allPackages: names,\n  }\n}\n\nconst getPatterns = (sources: string[], targets: string[]): string[] =>\n  sources.length > 0\n    ? sources.map((src) => src.includes('*') ? src : `${src}/**/*.{ts,tsx}`)\n    : targets.map((target) => target.includes('*') ? target : `${target}/**/*.{js,d.ts}`)\n\n// https://nodejs.org/api/packages.html\n// https://webpack.js.org/guides/package-exports/\ntype Entry = string | string[] | Record<string, string | string[] | Record<string, string | string[]>>\n\nconst getExportsEntries = (exports: string | Entry): [string, string[]][] => {\n  const entries: [string, Entry][] = Object.entries(exports)\n  const parseConditional = (e: Entry): string[] => typeof e === 'string' ? [e] : Object.values(e).map(parseConditional).flat(2)\n\n  // has subpaths\n  if (typeof exports !== 'string' && Object.keys(exports).some((k) => k.startsWith('.'))) {\n    return entries.map(([k, v]) => [k, parseConditional(v)])\n  }\n\n  return [['.', parseConditional(exports)]]\n}\n\nconst getExternalEsmModules = (cwd: string): Promise<{ names: string[], files: string[] }> =>\n  globby(['node_modules/*/package.json', 'node_modules/@*/*/package.json'], {\n    cwd,\n    onlyFiles: true,\n    absolute: true,\n  } as GlobbyOptions).then(async (files: string[]) =>\n    (await Promise.all(files\n      .map(async (f: string): Promise<{ name?: string, files?: string[] }> => {\n        const {name, exports} = await readJson(f)\n\n        if (!exports) {\n          return {name}\n        }\n\n        const _dir = dirname(f)\n        const exportsEntries = getExportsEntries(exports)\n\n        return {\n          name,\n          files: (await Promise.all(exportsEntries.map(([key, values]) =>\n\n            Promise.all(values.map(async(value) =>\n                (await globby(value, {cwd: _dir, onlyFiles: true, absolute: false}))\n                  .map(file => join(file)\n                    .replace(\n                      resolvePrefix('.', value),\n                      resolvePrefix(name, key)))\n              )\n\n            )))).flat(2)\n        }\n\n      }))).reduce<{ names: string[], files: string[] }>((m, {name, files: _files}) => {\n      if (name) {\n        m.names.push(name)\n      }\n\n      if (_files) {\n        m.files.push(..._files)\n      }\n\n      return m\n    }, {names: [], files: []}),\n  )\n\nconst resolvePrefix = (prefix: string, pattern?: string): string => {\n  if (!pattern) {\n    return prefix\n  }\n\n  let _pattern = pattern\n\n  if (_pattern.includes('*')) {\n    _pattern = _pattern.slice(0, _pattern.indexOf('*'))\n\n    if (_pattern.includes('/')) {\n      _pattern = _pattern.slice(0, _pattern.lastIndexOf('/'))\n    }\n  }\n\n  return join(prefix, _pattern)\n}\n","import {IFixOptions, IFixOptionsNormalized} from \"./interface\";\n\nexport const DEFAULT_FIX_OPTIONS: IFixOptionsNormalized = {\n  cwd: process.cwd(),\n  tsconfig: './tsconfig.json',\n  filenameVar: true,\n  dirnameVar: true,\n  ext: true,\n  unlink: true,\n  debug: () => {}, // eslint-disable-line\n}\n\nexport const normalizeOptions = (\n  opts?: IFixOptions,\n): IFixOptionsNormalized => ({\n  ...DEFAULT_FIX_OPTIONS,\n  ...opts,\n  debug: typeof opts?.debug === 'function'\n    ? opts.debug\n    : opts?.debug === true\n      ? console.log\n      : DEFAULT_FIX_OPTIONS.debug,\n})\n","import path from 'node:path'\n\nimport { fixContents } from './fixes'\nimport {IFixOptions, IFixOptionsNormalized, TFixContext, TResourceContext} from './interface'\nimport {\n  asArray,\n  existsSync,\n  read,\n  readJson,\n  remove,\n  unixify,\n  write,\n} from './util'\n\nimport {\n  getLocalModules,\n  getExternalModules,\n  getTsconfigTargets,\n} from './finder'\n\nimport {\n  normalizeOptions\n} from './options'\n\n\nexport const fixFilenameExtensions = (names: string[], ext: string): string[] =>\n  names.map((name) =>\n    name.endsWith('.d.ts')\n      ? name\n      : name.replace(/\\.[^./\\\\]+$/, ext))\n\nexport const fix = async (opts?: IFixOptions): Promise<void> => {\n  const options = normalizeOptions(opts)\n  const ctx = await resolve(options)\n\n  await patch(ctx, options)\n}\n\nconst resolve = async (opts: IFixOptionsNormalized): Promise<TFixContext> => {\n  const {cwd, target, src, tsconfig, out = cwd, ext, debug, unlink, sourceMap} = opts\n  const outDir = path.resolve(cwd, out)\n  const sources = asArray<string>(src)\n  const targets = [...asArray<string>(target), ...getTsconfigTargets(tsconfig, cwd)]\n  debug('debug:cwd', cwd)\n  debug('debug:outdir', outDir)\n  debug('debug:sources', sources)\n  debug('debug:targets', targets)\n\n  const isSource = sources.length > 0\n  const localModules = await getLocalModules(sources, targets, cwd)\n  const {\n    cjsModules,\n    esmModules,\n    allPackages\n  } = await getExternalModules(cwd)\n  debug('debug:external-cjs-modules', cjsModules)\n  debug('debug:external-esm-modules', esmModules)\n\n  const ignore = [...esmModules, ...allPackages]\n  const _localModules = typeof ext === 'string' ? fixFilenameExtensions(localModules, ext) : localModules\n  const allModules = [...cjsModules, ..._localModules]\n  const allJsModules = [...cjsModules, ...fixFilenameExtensions(localModules, '.js')]\n  debug('debug:local-modules', _localModules)\n\n  return {\n    outDir,\n    isSource,\n    ignore,\n    allJsModules,\n    allModules,\n    _localModules,\n    localModules\n  }\n}\n\nconst patch = async (ctx: TFixContext, options: IFixOptionsNormalized) => {\n  const {cwd, unlink, sourceMap} = options\n  const {\n    outDir,\n    isSource,\n    ignore,\n    allJsModules,\n    allModules,\n    _localModules,\n    localModules\n  } = ctx\n\n  await Promise.all(_localModules.map(async (name, i) => {\n    // NOTE d.ts may refer to .js ext only\n    const all = name.endsWith('.d.ts') ? allJsModules : allModules\n    const originName = localModules[i]\n    const nextName = (isSource ? originName : name)\n      .replace(\n        unixify(cwd),\n        unixify(outDir),\n      )\n    const contents = read(originName)\n    const ctx: TResourceContext = {\n      options,\n      contents,\n      isSource,\n      ignore,\n      filename: name,\n      filenames: all,\n      originName,\n      nextName,\n    }\n\n    const {contents: _contents} = fixContents(ctx)\n\n    write(nextName, _contents)\n\n    if (!isSource && unlink && cwd === outDir && nextName !== originName) {\n      remove(originName)\n    }\n\n    if (sourceMap) {\n      patchSourceFile(originName, nextName, unlink && cwd === outDir)\n    }\n  }))\n}\n\nconst patchSourceFile = (name: string, nextName: string, unlink = false) => {\n  if (name === nextName) {\n    return\n  }\n\n  const mapfile = `${name}.map`\n  if (!existsSync(mapfile)) {\n    return\n  }\n\n  const nextMapfile = `${nextName}.map`\n  const contents = readJson(mapfile)\n\n  contents.file = path.basename(nextName)\n  write(nextMapfile, JSON.stringify(contents))\n\n  if (unlink) {\n    remove(mapfile)\n  }\n}\n","import { IFixOptionsNormalized, TResourceContext } from './interface'\nimport {\n  fixBlankFiles as _fixBlankFiles,\n  fixContents as _fixContents,\n  fixDefaultExport as _fixDefaultExport,\n  fixDirnameVar as _fixDirnameVar,\n  fixFilenameVar as _fixFilenameVar,\n  fixModuleReferences as _fixModuleReferences,\n  fixSourceMapRef as _fixSourceMapRef,\n} from './fixes'\n\nexport const fixModuleReferences = (\n  contents: string,\n  filename: string,\n  filenames: string[],\n  cwd: string,\n  ignore: string[],\n): string =>\n  _fixModuleReferences({contents, filename, filenames, options: {cwd}, ignore} as TResourceContext).contents\n\nexport const fixDirnameVar = (contents: string, isSource?: boolean): string =>\n  _fixDirnameVar({contents, isSource} as TResourceContext).contents\n\nexport const fixFilenameVar = (contents: string, isSource?: boolean): string =>\n  _fixFilenameVar({contents, isSource} as TResourceContext).contents\n\nexport const fixDefaultExport = (contents: string): string =>\n  _fixDefaultExport({contents} as TResourceContext).contents\n\nexport const fixBlankFiles = (contents: string): string =>\n  _fixBlankFiles({contents} as TResourceContext).contents\n\nexport const fixSourceMapRef = (contents: string, originName: string, filename: string): string =>\n  _fixSourceMapRef({contents, originName, filename} as TResourceContext).contents\n\nexport const fixContents = (\n  contents: string,\n  filename: string,\n  filenames: string[],\n  options: IFixOptionsNormalized,\n  originName = filename, // NOTE Weird contract to avoid breaking change\n  isSource = false,\n  ignore: string[] = [],\n): string =>\n  _fixContents({contents, filename, filenames, options, originName, isSource, ignore} as TResourceContext).contents\n"],"names":["fixBlankFiles","ctx","contents","_extends","trim","length","fixDirnameVar","replace","isSource","fixFilenameVar","read","file","fse","readFileSync","encoding","write","outputFileSync","readJson","json5","parse","asArray","value","Array","isArray","remove","unlinkSync","unixify","path","resolveTsConfig","data","parent","resolve","dirname","compilerOptions","fixModuleReferences","filename","filenames","cwd","options","ignore","patchRefs","v","endsWith","slice","includes","resolveDependency","nested","files","dir","nmdir","bases","test","variants","reduce","m","e","forEach","push","find","f","fixSourceMapRef","originName","basename","fixDefaultExport","fixContents","_ctx","ext","dirnameVar","filenameVar","fillBlank","forceDefaultExport","sourceMap","getTsconfigTargets","tsconfig","targets","_tsconfigJson$compile","_tsconfigJson$compile2","tsconfigJson","outDir","module","toLowerCase","startsWith","console","warn","resolvePrefix","prefix","pattern","_pattern","indexOf","lastIndexOf","join","DEFAULT_FIX_OPTIONS","process","unlink","debug","fixFilenameExtensions","names","map","name","fix","opts","log","normalizeOptions","Promise","then","patch","reject","target","src","_opts$out","out","sources","concat","globby","getPatterns","onlyFiles","absolute","getLocalModules","localModules","all","_ref3","exports","_dir","exportsEntries","entries","Object","parseConditional","values","flat","keys","some","k","_ref2","getExportsEntries","_ref4","key","_globby","_Promise$all2","_Promise$all","_ref5","_m$files","_files","apply","getExternalEsmModules","_ref","esmModules","cjsModules","allPackages","getExternalModules","_localModules","allModules","allJsModules","i","nextName","_fixContents","patchSourceFile","mapfile","existsSync","nextMapfile","JSON","stringify","_fixModuleReferences","_fixDirnameVar","_fixFilenameVar","_fixDefaultExport","_fixBlankFiles","_fixSourceMapRef"],"mappings":"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"}